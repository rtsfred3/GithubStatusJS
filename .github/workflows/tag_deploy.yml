name: BunnyCDNDeploy

on:
    push:
        tags:
            - 'v[0-9]+\.[0-9]+\.[0-9]+'

jobs:
    deploy:
        runs-on: ubuntu-latest
        name: Deploy to BunnyCDN
        steps:
            - uses: actions/checkout@v2
              with:
                fetch-depth: 0
            - name: Echoing the tag name
              run: |
                echo '${{ github.ref_name }}'
            - name: Sync index.html, manifest.json, robots.txt, & sitemap.xml for spstat.us
              run: |
                echo "<!-- ${{ github.ref_name }} -->" >> StatuspageHTML/index.html
                echo "<!-- ${{ github.ref_name }} -->" >> StatuspageHTML/amp/index.html
                echo "<!-- ${{ github.ref_name }} -->" >> preact/index.html
                sed -i -e 's/{{version}}/${{ github.ref_name }}/g' StatuspageHTML/amp/index.html
                sed -i -e 's/{{version}}/${{ github.ref_name }}/g' preact/index.html
                curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/index.html --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @StatuspageHTML/index.html
                curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/amp/index.html --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @StatuspageHTML/amp/index.html
                curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/preact/index.html --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @preact/index.html
                curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/manifest.json --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @StatuspageHTML/manifest.json
                curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/robots.txt --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @StatuspageHTML/robots.txt
                curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/sitemap.xml --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @StatuspageHTML/sitemap.xml
            - name: Sync index.html, robots.txt, & sitemap.xml for reddit.spstat.us
              run: |
                echo "<!-- ${{ github.ref_name }} -->" >> sites/reddit/index.html
                curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME_REDDIT_SPTAT_US }}/index.html --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY_REDDIT_SPSTAT_US }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @sites/reddit/index.html
                curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME_REDDIT_SPTAT_US }}/sitemap.xml --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY_REDDIT_SPSTAT_US }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @sites/reddit/sitemap.xml
                curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME_REDDIT_SPTAT_US }}/robots.txt --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY_REDDIT_SPSTAT_US }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @sites/robots.txt
            - name: Purge spstat.us/, spstat.us/status/, spstat.us/components/, spstat.us/preact/, and spstat.us/amp/
              run: |
                curl --request GET --url 'https://api.bunny.net/purge?url=https://spstat.us/' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
                curl --request GET --url 'https://api.bunny.net/purge?url=https://spstat.us/status/' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
                curl --request GET --url 'https://api.bunny.net/purge?url=https://spstat.us/components/' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
                curl --request GET --url 'https://api.bunny.net/purge?url=https://spstat.us/amp/' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
                curl --request GET --url 'https://api.bunny.net/purge?url=https://spstat.us/preact/' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
                curl --request GET --url 'https://api.bunny.net/purge?url=https://spstat.us/sitemap.xml' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
                curl --request GET --url 'https://api.bunny.net/purge?url=https://spstat.us/robots.txt' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
                # curl --request GET --url 'https://api.bunny.net/purge?url=https://spstat.us/styling/main.min.css' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
                # curl --request GET --url 'https://api.bunny.net/purge?url=https://spstat.us/js/StatuspageHTML.min.js' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
                curl --request GET --url 'https://api.bunny.net/purge?url=https://reddit.spstat.us/' --header 'AccessKey: ${{ secrets.BUNNY_API_KEY }}' --header 'accept: application/json'
            - name: Sync /js/ to ${{ github.ref_name }}/js/
              run: |
                for x in $(ls -p js | grep -v /); do curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/js/$x --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @js/$x; done
                for x in $(ls -p js | grep -v /); do curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/${{github.ref_name}}/js/$x --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @js/$x; done
            - name: Sync /styling/ to ${{ github.ref_name }}/styling/
              run: |
                for x in $(ls -p styling | grep -v /); do curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/styling/$x --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @styling/$x; done
                for x in $(ls -p styling | grep -v /); do curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/${{github.ref_name}}/styling/$x --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @styling/$x; done
            - name: Sync /modules/ to ${{ github.ref_name }}/modules/
              run: |
                for x in $(ls -p modules | grep -v /); do curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/modules/$x --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @modules/$x; done
                for x in $(ls -p modules | grep -v /); do curl --request PUT --url https://storage.bunnycdn.com/${{ secrets.BUNNY_STORAGE_ZONE_NAME }}/${{github.ref_name}}/modules/$x --header 'AccessKey: ${{ secrets.BUNNY_STORAGE_API_KEY }}' --header 'Content-Type: application/octet-stream' --header 'accept: application/json' --data-binary @modules/$x; done
    
    publish-tauri:
        permissions:
            contents: write
        strategy:
            fail-fast: false
            matrix:
              settings:
                - platform: 'macos-latest' # for Arm based macs (M1 and above).
                  args: '--target aarch64-apple-darwin'
                - platform: 'macos-latest' # for Intel based macs.
                  args: '--target x86_64-apple-darwin'
                # - platform: 'ubuntu-22.04'
                #   args: ''
                # - platform: 'windows-latest'
                #   args: ''
        
        runs-on: ${{ matrix.settings.platform }}
        steps:
            - uses: actions/checkout@v4
      
            - name: Install Dependencies (Ubuntu only)
              if: matrix.settings.platform == 'ubuntu-22.04'
              run: |
                sudo apt-get update
                sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
                cd tauri/
            
            - name: Setup Mac (Mac only)
              if: matrix.settings.platform == 'macos-latest'
              run: |
                  cd tauri/
      
            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                node-version: lts/*
                cache: 'npm'
                cache-dependency-path: 'tauri/package-lock.json'
      
            - name: Install Rust Stable
              uses: dtolnay/rust-toolchain@stable
              with:
                # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
      
            - name: Rust Cache
              uses: swatinem/rust-cache@v2
              with:
                workspaces: './src-tauri -> target'
      
            - name: Install Frontend Dependencies
              run: npm install

            - name: Test Build
              run: |
                cd tauri
                npm run tauri build
            
            - name: Uploading Artifacts
              uses: actions/upload-artifact@v3
              with:
                name: release-artifacts
                path: |
                      tauri/src-tauri/target/release/bundle/dmg/*.dmg
                      tauri/src-tauri/target/release/bundle/appimage/*.AppImage
             
            - uses: tauri-apps/tauri-action@v0
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                projectPath: tauri/
                tagName: ${{ github.ref_name }}
                releaseName: 'Latest Tauri ${{ github.ref_name }}'
                releaseBody: 'See the assets to download this version and install.'
                releaseDraft: false
                prerelease: false
                args: ${{ matrix.settings.args }}
