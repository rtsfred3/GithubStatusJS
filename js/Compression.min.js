class Compression{static async Compress(e,t="gzip"){const r=(new TextEncoder).encode(e);return this.CompressChunk(r,t)}static async CompressFile(e,t="gzip"){var r=await e.arrayBuffer(),a=new Uint8Array(r),n="gzip"==t?".gz":"",i=e.type;"gzip"==t&&(i="application/gzip");const o=await this.CompressChunk(a,t);return new File([o],`${e.name}${n}`,{type:i})}static async CompressChunk(e,t="gzip"){const r=new CompressionStream(t),a=r.writable.getWriter();a.write(e),a.close();const n=await new Response(r.readable).arrayBuffer();return new Uint8Array(n)}static async Decompress(e,t="gzip"){var r=e.buffer;const a=new DecompressionStream(t),n=a.writable.getWriter();n.write(r),n.close();const i=await new Response(a.readable).arrayBuffer();return(new TextDecoder).decode(i)}static async DecompressFile(e,t,r,a="gzip"){const n=(await e.stream().getReader().read()).value.buffer,i=new DecompressionStream(a),o=i.writable.getWriter();o.write(n),o.close();const s=await new Response(i.readable).arrayBuffer();return new File([s],t,{type:r})}static DownloadArrayBuffer(e,t,r="application/gzip"){const a=new Blob([e],{type:r});this.DownloadBlob(a,t)}static async DownloadFile(e){var t=document.createElement("a");t.download=e.name,t.href=window.URL.createObjectURL(e),t.click(),t.remove()}static DownloadBlob(e,t){var r=document.createElement("a");r.download=t,r.href=window.URL.createObjectURL(e),document.body.appendChild(r),r.click(),r.remove()}static JsonFile(e,t){return new File([JSON.stringify(e,null,2)],t,{type:"application/json"})}static get mbString(){for(var e="",t=0;t<1e6;t++)e+=`${Math.floor(9*Math.random())}`;return e}static SampleTextFile(e,t){for(var r="",a=0;a<e;a++)r+=Compression.mbString;return new File([r],t,{type:"text/plain"})}}