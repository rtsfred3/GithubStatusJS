class Compression{static kbString="0".repeat(1e3);static mbString=this.kbString.repeat(1e3);static kbRandomString=Array.from({length:1e3},(e=>`${Math.floor(9*Math.random())}`)).join("");static mbRandomString=Array.from({length:1e6},(e=>`${Math.floor(9*Math.random())}`)).join("");static async Compress(e,t="gzip"){const a=(new TextEncoder).encode(e);return this.CompressChunk(a,t)}static async CompressFile(e,t="gzip"){var a=await e.arrayBuffer(),r=new Uint8Array(a),n="gzip"==t?".gz":"",i=e.type;"gzip"==t&&(i="application/gzip");const s=await this.CompressChunk(r,t);return new File([s],`${e.name}${n}`,{type:i})}static async CompressChunk(e,t="gzip"){const a=new CompressionStream(t),r=a.writable.getWriter();r.write(e),r.close();const n=await new Response(a.readable).arrayBuffer();return new Uint8Array(n)}static async Decompress(e,t="gzip"){var a=e.buffer,r=await this.DecompressChunk(a,t);return(new TextDecoder).decode(r)}static async DecompressFile(e,t,a,r="gzip"){const n=(await e.stream().getReader().read()).value.buffer;var i=await this.DecompressChunk(n,r);return new File([i],t,{type:a})}static async DecompressChunk(e,t="gzip"){const a=new DecompressionStream(t),r=a.writable.getWriter();return r.write(e),r.close(),await new Response(a.readable).arrayBuffer()}static DownloadArrayBuffer(e,t,a="application/gzip"){const r=new Blob([e],{type:a});this.DownloadBlob(r,t)}static DownloadFile(e){var t=document.createElement("a");t.download=e.name,t.href=window.URL.createObjectURL(e),t.click(),t.remove()}static DownloadBlob(e,t){var a=document.createElement("a");a.download=t,a.href=window.URL.createObjectURL(e),document.body.appendChild(a),a.click(),a.remove()}static JsonFile(e,t){return new File([JSON.stringify(e,null,2)],t,{type:"application/json"})}static TextFile(e,t){return new File([e],t,{type:"text/plain"})}static SampleTextFile(e,t){return this.TextFile(this.mbRandomString.repeat(e),t)}}