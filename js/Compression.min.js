class Compression{static concatUint8Arrays(e,s){var t=new Uint8Array(e.byteLength+s.byteLength);return t.set(e,0),t.set(s,e.length),t}static async CompressAsync(e,s="gzip"){const t=(new TextEncoder).encode(e);return this.CompressChunkAsync(t,s)}static async CompressJsonAsync(e,s="gzip"){return await this.CompressAsync(JSON.stringify(e),s)}static async CompressFileAsync(e,s="gzip"){var t=await e.arrayBuffer(),n=new Uint8Array(t),a="gzip"==s?".gz":"",r=e.type;"gzip"==s&&(r="application/gzip");const i=await this.CompressChunkAsync(n,s);return new File([i],`${e.name}${a}`,{type:r})}static CompressAndDownloadJson(e,s="compressed.json"){const t=this.JsonFile(e,s);this.CompressFileAsync(t,"gzip").then((e=>this.DownloadFile(e)))}static async CompressChunkAsync(e,s="gzip"){const t=new CompressionStream(s),n=await this.toArrayBuffer(t,e);return new Uint8Array(n)}static async DecompressAsync(e,s="gzip"){e instanceof Uint8Array&&(e=e.buffer);var t=await this.DecompressChunkAsync(e,s);return(new TextDecoder).decode(t)}static async DecompressJsonAsync(e,s="gzip"){const t=await this.DecompressAsync(e,s);return JSON.parse(t)}static async DecompressFileAsync(e,s="text/plain",t=void 0,n="gzip"){const a=await this.ReadCompressedReadableStreamAsync(e.stream()),r=await this.DecompressChunkAsync(a,n);return null==t&&(t=e.name.endsWith(".gz")?e.name.replace(".gz",""):"output"),t.endsWith(".json")&&(s="application/json"),new File([r],t,{type:s})}static async DecompressJsonFileAsync(e,s="gzip"){const t=await this.DecompressFileAsync(e,"application/json","output.json",s);return JSON.parse(await t.text())}static async ReadCompressedReadableStreamAsync(e){let s=new Uint8Array(0);const t=e.getReader();let n=await t.read();for(;!n.done;)s=this.concatUint8Arrays(s,n.value),n=await t.read();return s.buffer}static async DecompressChunkAsync(e,s="gzip"){const t=new DecompressionStream(s);return await this.toArrayBuffer(t,e)}static async toArrayBuffer(e,s){const t=e.writable.getWriter();return t.write(s),t.close(),await new Response(e.readable).arrayBuffer()}static DownloadArrayBuffer(e,s,t="application/gzip"){const n=new Blob([e],{type:t});this.DownloadBlob(n,s)}static DownloadFile(e){this.DownloadBlob(e,e.name)}static DownloadBlob(e,s){var t=document.createElement("a");t.download=s,t.href=window.URL.createObjectURL(e),document.body.appendChild(t),t.click(),t.remove()}static JsonFile(e,s){return new File([JSON.stringify(e,null,2)],s,{type:"application/json"})}}