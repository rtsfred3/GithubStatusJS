class Compression{static kbString="0".repeat(1e3);static mbString=this.kbString.repeat(1e3);static kbRandomString=Array.from({length:1e3},(e=>`${Math.floor(9*Math.random())}`)).join("");static mbRandomString=Array.from({length:1e6},(e=>`${Math.floor(9*Math.random())}`)).join("");static concatUint8Arrays(e,t){var a=new Uint8Array(e.byteLength+t.byteLength);return a.set(e,0),a.set(t,e.length),a}static async Compress(e,t="gzip"){const a=(new TextEncoder).encode(e);return this.CompressChunk(a,t)}static async CompressFile(e,t="gzip"){var a=await e.arrayBuffer(),n=new Uint8Array(a),r="gzip"==t?".gz":"",i=e.type;"gzip"==t&&(i="application/gzip");const s=await this.CompressChunk(n,t);return new File([s],`${e.name}${r}`,{type:i})}static CompressAndDownloadJson(e,t="compressed.json"){const a=this.JsonFile(e,t);this.CompressFile(a,"gzip").then((e=>this.DownloadFile(e)))}static async CompressChunk(e,t="gzip"){const a=new CompressionStream(t),n=a.writable.getWriter();n.write(e),n.close();const r=await new Response(a.readable).arrayBuffer();return new Uint8Array(r)}static async Decompress(e,t="gzip"){var a=e.buffer,n=await this.DecompressChunk(a,t);return(new TextDecoder).decode(n)}static async DecompressFile(e,t=void 0,a="text/plain",n="gzip"){const r=await this.ReadCompressedReadableStream(e.stream()),i=await this.DecompressChunk(r,n);return null==t&&(t=e.name.replace(".gz","")),t.endsWith(".json")&&(a="application/json"),new File([i],t,{type:a})}static async ReadCompressedReadableStream(e){let t=new Uint8Array(0);const a=e.getReader();let n=await a.read();for(;!n.done;)t=this.concatUint8Arrays(t,n.value),n=await a.read();return t.buffer}static async DecompressChunk(e,t="gzip"){const a=new DecompressionStream(t),n=a.writable.getWriter();return n.write(e),n.close(),await new Response(a.readable).arrayBuffer()}static DownloadArrayBuffer(e,t,a="application/gzip"){const n=new Blob([e],{type:a});this.DownloadBlob(n,t)}static DownloadFile(e){this.DownloadBlob(e,e.name)}static DownloadBlob(e,t){var a=document.createElement("a");a.download=t,a.href=window.URL.createObjectURL(e),document.body.appendChild(a),a.click(),a.remove()}static JsonFile(e,t){return new File([JSON.stringify(e,null,2)],t,{type:"application/json"})}static TextFile(e,t){return new File([e],t,{type:"text/plain"})}static SampleTextFile(e,t=void 0){return null==t&&(t=`${e}MB.txt`),this.TextFile(this.mbRandomString.repeat(parseInt(e)),t)}}